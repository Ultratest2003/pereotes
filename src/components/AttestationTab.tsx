
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import { Settings, Users } from 'lucide-react';
import TestManagement from './TestManagement';
import TestExecution from './TestExecution';

const AttestationTab = () => {
  const [selectedLevel, setSelectedLevel] = useState<number | null>(null);
  const [showCodeDialog, setShowCodeDialog] = useState(false);
  const [showBranchDialog, setShowBranchDialog] = useState(false);
  const [showManagementDialog, setShowManagementDialog] = useState(false);
  const [managementLevel, setManagementLevel] = useState<number | null>(null);
  const [codeInput, setCodeInput] = useState('');
  const [selectedBranch, setSelectedBranch] = useState('');
  const [isTestStarted, setIsTestStarted] = useState(false);
  const [testAccessCode, setTestAccessCode] = useState('');
  const { toast } = useToast();
  const { user } = useAuth();

  const levels = [
    { id: 1, name: '–£—Ä–æ–≤–µ–Ω—å 1', description: '–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', color: 'bg-green-500' },
    { id: 2, name: '–£—Ä–æ–≤–µ–Ω—å 2', description: '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', color: 'bg-yellow-500' },
    { id: 3, name: '–£—Ä–æ–≤–µ–Ω—å 3', description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', color: 'bg-red-500' },
  ];

  const branches = [
    { id: 'karaoke', name: '–ö–ê–†–ê–û–ö–ï', description: '–í–µ—Ç–∫–∞ –∫–∞—Ä–∞–æ–∫–µ', icon: 'üé§' },
    { id: 'lit_club', name: '–õ–ò–¢.–ö–õ–£–ë', description: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∫–ª—É–±', icon: 'üìö' },
    { id: 'kinoshka', name: '–ö–ò–ù–û–®–ö–ê', description: '–ö–∏–Ω–æ–∫–ª—É–±', icon: 'üé¨' },
  ];

  const handleLevelSelect = (level: number) => {
    setSelectedLevel(level);
    setShowCodeDialog(true);
    setCodeInput('');
  };

  const handleManagementClick = (level: number) => {
    setManagementLevel(level);
    setShowManagementDialog(true);
  };

  const handleCodeSubmit = () => {
    if (codeInput.length < 10) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä",
        variant: "destructive",
      });
      return;
    }

    setTestAccessCode(codeInput);
    setShowCodeDialog(false);
    setShowBranchDialog(true);
  };

  const handleBranchSelect = (branchId: string) => {
    setSelectedBranch(branchId);
    setShowBranchDialog(false);
    setIsTestStarted(true);
  };

  const handleTestComplete = () => {
    setIsTestStarted(false);
    setSelectedLevel(null);
    setSelectedBranch('');
    setTestAccessCode('');
    
    toast({
      title: "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
      description: "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏",
    });
  };

  if (isTestStarted && selectedLevel && selectedBranch) {
    return (
      <TestExecution
        testId={`level_${selectedLevel}`}
        accessCode={testAccessCode}
        branch={selectedBranch}
        userName={user?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
        onComplete={handleTestComplete}
      />
    );
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>–ü–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è</CardTitle>
          <CardDescription>
            –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-3">
            {levels.map((level) => (
              <Card 
                key={level.id} 
                className="cursor-pointer hover:shadow-md transition-shadow relative"
              >
                <Button
                  variant="ghost"
                  size="sm"
                  className="absolute top-2 right-2 p-1 h-8 w-8"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleManagementClick(level.id);
                  }}
                >
                  <Settings className="h-4 w-4" />
                </Button>
                <CardContent 
                  className="p-6 text-center"
                  onClick={() => handleLevelSelect(level.id)}
                >
                  <div className={`w-12 h-12 ${level.color} rounded-full mx-auto mb-4 flex items-center justify-center text-white font-bold text-lg`}>
                    {level.id}
                  </div>
                  <h3 className="font-semibold mb-2">{level.name}</h3>
                  <p className="text-sm text-muted-foreground">{level.description}</p>
                  <Badge variant="outline" className="mt-2">
                    –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
                  </Badge>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>

      <Dialog open={showCodeDialog} onOpenChange={setShowCodeDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞</DialogTitle>
            <DialogDescription>
              –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è {selectedLevel} –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="access-code">–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞</Label>
              <Input
                id="access-code"
                type="text"
                placeholder="404182319474147330"
                value={codeInput}
                onChange={(e) => setCodeInput(e.target.value.replace(/\D/g, ''))}
                maxLength={20}
              />
              <p className="text-sm text-muted-foreground">
                –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)
              </p>
            </div>
            <div className="flex gap-2">
              <Button 
                onClick={handleCodeSubmit}
                disabled={codeInput.length < 10}
                className="flex-1"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
              </Button>
              <Button 
                variant="outline" 
                onClick={() => setShowCodeDialog(false)}
                className="flex-1"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      <Dialog open={showBranchDialog} onOpenChange={setShowBranchDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ç–∫—É</DialogTitle>
            <DialogDescription>
              –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4">
            {branches.map((branch) => (
              <Card 
                key={branch.id}
                className="cursor-pointer hover:shadow-md transition-shadow"
                onClick={() => handleBranchSelect(branch.id)}
              >
                <CardContent className="p-4 text-center">
                  <div className="text-2xl mb-2">{branch.icon}</div>
                  <h3 className="font-semibold mb-1">{branch.name}</h3>
                  <p className="text-sm text-muted-foreground">{branch.description}</p>
                </CardContent>
              </Card>
            ))}
          </div>
          <div className="flex justify-center mt-4">
            <Button 
              variant="outline" 
              onClick={() => {
                setShowBranchDialog(false);
                setShowCodeDialog(true);
              }}
            >
              –ù–∞–∑–∞–¥
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      <Dialog open={showManagementDialog} onOpenChange={setShowManagementDialog}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden">
          <DialogHeader>
            <DialogTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏ - –£—Ä–æ–≤–µ–Ω—å {managementLevel}</DialogTitle>
            <DialogDescription>
              –î–æ–±–∞–≤–ª—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ —É–¥–∞–ª—è–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ä–æ–≤–Ω—è {managementLevel}
            </DialogDescription>
          </DialogHeader>
          <ScrollArea className="h-[70vh] w-full pr-4">
            {managementLevel && (
              <TestManagement level={managementLevel} />
            )}
          </ScrollArea>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default AttestationTab;
